#!/usr/bin/env python
## @package dna2aa 
#	Translate the input sequence in the specified or all frames.
#
#	Output: .fa file of translated subject sequences.
#	These sequences are naively translated as internal ORFs,
#	and are likely larger than the sequence's true ORF.
#	The output is best suited to use for hmmer-like alignments.
#
#	Written by Austin Hammond, GSC 2015

import argparse
import sys
import csv

from itertools import groupby

import fastatools as ft


# sorry for the long argparse lines, it gets angry otherwise
parser = argparse.ArgumentParser(description='Naively translate the input DNA sequence.')
parser.add_argument('--sequence', '-s', action='store', help="The fasta file of DNA sequences [STDIN]", default='stdin')
parser.add_argument('--frame', '-f', action='store', choices=['+1','+2','+3','-1','-2','-3','all'], help="Frame to use for sequence translation [all]", default='all')
#parser.add_argument('--seqbreak','-b',action='store_true',help="Break translations at in-frame stop codons")
parser.add_argument('--outfile', '-o', action='store', help='Name to use for output fasta file [STDOUT]', default='stdout')
parser.add_argument('--mito', '-m', action='store_true', help='Sequence is mitochondrial; use vertebrate Mt code. Currently not smart enough to allow stop codons to be completed by polyadenylation.')

args = parser.parse_args()

frm = args.frame
fasta = args.sequence
fastadic = {}
outfile = args.outfile
outdic = {}

# extra functions
def mtdna2aa(seq):
	tbl = {"ATT":"I", "ATC":"I", "ATA":"M", "CTT":"L", "CTC":"L", "CTA":"L", "CTG":"L",
        "TTA":"L", "TTG":"L", "GTT":"V", "GTC":"V", "GTA":"V", "GTG":"V", "TTT":"F",
        "TTC":"F", "ATG":"M", "TGT":"C", "TGC":"C", "GCT":"A", "GCC":"A", "GCA":"A",
        "GCG":"A", "GGT":"G", "GGC":"G", "GGA":"G", "GGG":"G", "CCT":"P", "CCC":"P",
        "CCA":"P", "CCG":"P", "ACT":"T", "ACC":"T", "ACA":"T", "ACG":"T", "TCT":"S",
        "TCC":"S", "TCA":"S", "TCG":"S", "AGT":"S", "AGC":"S", "TAT":"Y", "TAC":"Y",
        "TGG":"W", "CAA":"Q", "CAG":"Q", "AAT":"N", "AAC":"N", "CAT":"H", "CAC":"H",
        "GAA":"E", "GAG":"E", "GAT":"D", "GAC":"D", "AAA":"K", "AAG":"K", "CGT":"R",
        "CGC":"R", "CGA":"R", "CGG":"R", "AGA":"-", "AGG":"-", "TAA":"-", "TAG":"-",
        "TGA":"W"}
	j = 0 # for iteration
	aa = ''
	seql = len(seq)
	if seql % 3 != 0:
		seq = seq[0:(seql-seql%3)] #trim to multiple of 3, but should be already
	seql = len(seq) #recalculate
	for j in range(0,seql,3):
		j += 1
		if j == (seql-1):
			codon = seq[j:]
		else:
			codon = seq[j-1:j+2]
#	print codon
		aa = aa + tbl[codon]
	# force first codon to be M
	aa = "M" + aa[1:]

	return aa

def mtsixframe(seq):
	one = mtdna2aa(seq)
	two = mtdna2aa(seq[1:])
	three = mtdna2aa(seq[2:])
	none = mtdna2aa(ft.revcomp(seq))
	ntwo = mtdna2aa(ft.revcomp(seq)[1:])
	nthree = mtdna2aa(ft.revcomp(seq)[2:])

	return [one, two, three, none, ntwo, nthree]	

## main

#	read in the input sequences
#if len(sys.argv) == 1:
#	parser.print_help()
#	quit()

if fasta == 'stdin':
	for rec in ft.fasta_iter(sys.stdin):
		fastadic[rec[0].split(" ")[0]] = rec[1]

else:
	with open(fasta) as fa:
		for rec in ft.fasta_iter(fa):
			fastadic[rec[0].split(" ")[0]] = rec[1]

#	translate the input sequence as specified by the user
#if seqbreak:
	# need to handle the many 'imaginary' 3' partial ORFs (stop but no start)
#	for sqn in fastadic.items():
#                if frm == 'all':
#                        trns=sixframe(sqn[1])
#		elif frm == '+1':
#                        trns=dna2aa(sqn[1])
#                elif frm == '+2':
#                        trns=dna2aa(sqn[1][1:])
#                elif frm == '+3':
#                        trns=dna22(sqn[1][2:])
#                elif frm == '-1':
#                        trns=dna2aa(revcomp(sqn[1]))
#                elif frm == '-2':
#                        trns=dna2aa(revcomp(sqn[1])[1:])
#                else:
#                        trns=dna2aa(revcomp(sqn[1])[2:])

		# split the translations at the stop
 #            	transdic={}
#		multi=filter(bool,sqn[1].split("-")) ####### finish from here, make sure to split correctly
#		transdic[sqn[0]]={}
#		j=0 # for iterating over the partial ORFs
		# set each of the pieces as entries in the new dict
#		for i in range(0,len(multi)):
#			if length i >= 5:
#				transdic[sqn[0]][sqn[0]+"-"+str(i)]=multi[i]

#        	outdic[sqn[0]]=trns

	
#else: #if finished and activated, add one indent level to the code below
for sqn in fastadic.items():

	if args.mito == True:
		if frm == 'all':
			trns = mtsixframe(sqn[1])
		elif frm == '+1':
			trns = mtdna2aa(sqn[1])
		elif frm == '+2':
			trns = mtdna2aa(sqn[1][1:])
		elif frm == '+3':
			trns = mtdna2aa(sqn[1][2:])
		elif frm == '-1':
			trns = mtdna2aa(ft.revcomp(sqn[1]))
		elif frm == '-2':
			trns = mtdna2aa(ft.revcomp(sqn[1])[1:])
		else:
			trns = mtdna2aa(ft.revcomp(sqn[1])[2:])

	else:
		if frm == 'all':
			trns = ft.sixframe(sqn[1])
		elif frm == '+1':
			trns = ft.dna2aa(sqn[1])
		elif frm == '+2':
			trns = ft.dna2aa(sqn[1][1:])
		elif frm == '+3':
			trns = ft.dna2aa(sqn[1][2:])
		elif frm == '-1':
			trns = ft.dna2aa(ft.revcomp(sqn[1]))
		elif frm == '-2':
			trns = ft.dna2aa(ft.revcomp(sqn[1])[1:])
		else:
			trns = ft.dna2aa(ft.revcomp(sqn[1])[2:])

	outdic[sqn[0]] = trns
	
#	write out the output
if outfile == 'stdout':
	for trns in outdic.items():
		if frm == 'all':
			i = 0 # for iteration over the translations
			for sqn in ['+1','+2','+3','-1','-2','-3']:
				sys.stdout.write(">" + trns[0] + "_frame=" + sqn + "\n" + trns[1][i] + "\n")
				i += 1
		else:
			sys.stdout.write(">" + trns[0] + "_frame=" + frm + "\n" + trns[1] + "\n")

else:
	with open(outfile,"w") as finalout:
		for trns in outdic.items():
			if frm == 'all':
				i = 0 # for iteration over the translations
				for sqn in ['+1','+2','+3','-1','-2','-3']:
					finalout.write(">" + trns[0] + "_frame=" + sqn + "\n" + trns[1][i] + "\n")
					i += 1
			else:
				finalout.write(">" + trns[0] + "_frame=" + frm + "\n" + trns[1] + "\n")

### EOF ###
